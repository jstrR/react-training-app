{"version":3,"sources":["components/Article.js","components/Comments.js","components/Add.js","App.js","serviceWorker.js","index.js"],"names":["Article","state","displayBigText","handleLinkClick","e","preventDefault","_this","setState","articleData","this","props","react_default","a","createElement","className","author","text","Fragment","bigText","href","onClick","trim","length","React","Component","Comments","renderComments","data","map","item","Article_Article","key","id","Add","nameValue","commentsValue","bigCommentsValue","agree","handleFormChange","_e$currentTarget","currentTarget","value","Object","defineProperty","handleCheckboxChange","checked","handleButtonClick","_this$state","onAddComments","Date","validate","_this$state2","placeholder","onChange","rows","type","disabled","App","commentsStack","JSON","parse","localStorage","getItem","isLoading","handleAddcomments","console","log","newComment","concat","toConsumableArray","setItem","stringify","Comments_Comments","Add_Add","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eea7f804.chunk.js","sourcesContent":["import React from 'react' \r\nimport PropTypes from 'prop-types' \r\n\r\nclass Article extends React.Component {\r\n    state = {\r\n        displayBigText: false,\r\n    }\r\n\r\n    handleLinkClick = (e) => {\r\n        e.preventDefault()\r\n        this.setState({displayBigText: !this.state.displayBigText})\r\n    }\r\n\r\n    render() {\r\n        const {articleData} = this.props;\r\n        const {displayBigText} = this.state;\r\n        return(\r\n            <div className = \"article\">\r\n                <p className=\"comments_author\">{articleData.author}</p>\r\n                <p className=\"comments_text\">{articleData.text}</p>\r\n                {\r\n                    displayBigText ? <React.Fragment><p className=\"comments_big-text\">{articleData.bigText}</p>\r\n                        <a href=\"#hide\" className='comments_hide' onClick={this.handleLinkClick}>Hide</a>\r\n                    </React.Fragment> : \r\n                    articleData.bigText.trim().length > 0 ? <a href=\"#readmore\" className='comments_readmore' onClick={this.handleLinkClick}>Extend</a> :\r\n                    null\r\n                }                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nArticle.propTypes = {\r\n    data: PropTypes.shape({\r\n      id: PropTypes.number.isRequired, \r\n      author: PropTypes.string.isRequired,\r\n      text: PropTypes.string.isRequired,\r\n    }),\r\n}\r\n\r\nexport { Article }","import React from 'react' \r\nimport { Article } from './Article'\r\n\r\n\r\nclass Comments extends React.Component {\r\n\r\n    renderComments = () => {\r\n        const {data} = this.props;\r\n        let CommentsTemplate = null;\r\n        if(data.length > 0) {\r\n            CommentsTemplate = data.map(function(item) {\r\n                return(\r\n                    <Article articleData = { item } key = {item.id}/>\r\n                )\r\n            })\r\n        }   else CommentsTemplate = <p>Unfortunately, no Comments</p>\r\n        return CommentsTemplate;\r\n    }\r\n\r\n    render() {\r\n        const {data} = this.props;       \r\n        return(\r\n            <div className=\"Comments\">\r\n                {this.renderComments()}\r\n                {\r\n                data.length > 0 ? <strong>Total Comments: {data.length}</strong> : null\r\n                }                \r\n            </div>\r\n        )\r\n    }    \r\n}\r\n\r\nexport { Comments }","import React from 'react' \r\n\r\nclass Add extends React.Component {\r\n    state = {\r\n        nameValue: '',\r\n        commentsValue: '',\r\n        bigCommentsValue: '',\r\n        agree: false\r\n    }\r\n\r\n    handleFormChange = (e) => {\r\n        const {id,value} = e.currentTarget;\r\n        this.setState({[id]: value})\r\n    }\r\n\r\n    handleCheckboxChange = (e) => {\r\n        this.setState({agree: e.currentTarget.checked})\r\n    }\r\n\r\n    handleButtonClick = (e) => {\r\n        e.preventDefault()\r\n        const { nameValue, commentsValue, bigCommentsValue} = this.state\r\n        this.props.onAddComments({\r\n            id: +new Date(),\r\n            author: nameValue,\r\n            text: commentsValue,\r\n            bigText: bigCommentsValue\r\n          })\r\n    }\r\n\r\n    validate = () => {\r\n        const { nameValue, commentsValue, agree } = this.state\r\n        if (nameValue.trim() && commentsValue.trim() && agree) {\r\n            return true\r\n        }\r\n            return false\r\n    }\r\n\r\n    render() {\r\n      return (\r\n            <React.Fragment>\r\n                <form className='add'>\r\n                    <input className='add_author' id=\"nameValue\" placeholder='Your name' onChange={this.handleFormChange} value={this.state.nameValue}/>\r\n                    <textarea className='add_text' id=\"commentsValue\" placeholder='Comment text' onChange={this.handleFormChange} value={this.state.commentsValue}></textarea>\r\n                    <textarea className='add_big-text' id=\"bigCommentsValue\" placeholder='Extended comment' onChange={this.handleFormChange} value={this.state.bigCommentsValue} rows=\"10\"></textarea>\r\n                    <label className='add_checkrule' id=\"agree\" >\r\n                        <input type='checkbox' onChange={this.handleCheckboxChange}/> I agree with rules.\r\n                    </label>\r\n                    <button className='add_btn' disabled={!this.validate()} onClick={this.handleButtonClick}>Add Comment!</button>\r\n                </form>              \r\n            </React.Fragment>\r\n      )\r\n    }\r\n}\r\n\r\nexport { Add }","import React from 'react';\nimport { Comments } from './components/Comments';\nimport { Add } from './components/Add';\n\nclass App extends React.Component {\n\n  state = {\n    commentsStack: JSON.parse(localStorage.getItem(\"commentsData\")),\n    isLoading: false\n  }\n\n  componentWillMount() {\n    console.log(this.state.commentsStack)\n    const {commentsStack} = this.state\n    if(!commentsStack){\n      this.setState({commentsStack: []})\n    } \n\n    /*download comments from server\n    this.setState({ isLoading: true })\n    fetch('http://localhost:3000/data/commentsData.json')\n      .then(response => {\n        return response.json()\n      })\n      .then(data => {\n        console.log('server data is loaded')\n        this.setState({ isLoading: false, comments: data })\n      })*/\n  }\n  \n  \n  handleAddcomments = data => {\n    console.log(data)\n    let {commentsStack} = this.state\n    let newComment = [...commentsStack, data]\n    localStorage.setItem(\"commentsData\", JSON.stringify(newComment))\n    this.setState({ commentsStack: JSON.parse(localStorage.getItem(\"commentsData\")) })    \n  }\n\n  render(){\n    const { commentsStack, isLoading } = this.state\n    console.log(commentsStack)\n    return(\n      <React.Fragment>\n        <h3>Comments</h3>\n        {isLoading && <p>Загружаю...</p>}\n        <Comments data={commentsStack} />\n        <Add onAddComments = {this.handleAddcomments}/>\n      </React.Fragment>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n  \nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}